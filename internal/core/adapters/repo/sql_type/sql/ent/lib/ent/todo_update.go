// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hex-base/internal/core/adapters/repo/sql_type/sql/ent/lib/ent/form"
	"hex-base/internal/core/adapters/repo/sql_type/sql/ent/lib/ent/predicate"
	"hex-base/internal/core/adapters/repo/sql_type/sql/ent/lib/ent/todo"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TodoUpdate is the builder for updating Todo entities.
type TodoUpdate struct {
	config
	hooks    []Hook
	mutation *TodoMutation
}

// Where appends a list predicates to the TodoUpdate builder.
func (tu *TodoUpdate) Where(ps ...predicate.Todo) *TodoUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TodoUpdate) SetName(s string) *TodoUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TodoUpdate) SetNillableName(s *string) *TodoUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TodoUpdate) ClearName() *TodoUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetTask sets the "task" field.
func (tu *TodoUpdate) SetTask(s string) *TodoUpdate {
	tu.mutation.SetTask(s)
	return tu
}

// SetNillableTask sets the "task" field if the given value is not nil.
func (tu *TodoUpdate) SetNillableTask(s *string) *TodoUpdate {
	if s != nil {
		tu.SetTask(*s)
	}
	return tu
}

// ClearTask clears the value of the "task" field.
func (tu *TodoUpdate) ClearTask() *TodoUpdate {
	tu.mutation.ClearTask()
	return tu
}

// AddFormIDs adds the "form" edge to the Form entity by IDs.
func (tu *TodoUpdate) AddFormIDs(ids ...int64) *TodoUpdate {
	tu.mutation.AddFormIDs(ids...)
	return tu
}

// AddForm adds the "form" edges to the Form entity.
func (tu *TodoUpdate) AddForm(f ...*Form) *TodoUpdate {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.AddFormIDs(ids...)
}

// Mutation returns the TodoMutation object of the builder.
func (tu *TodoUpdate) Mutation() *TodoMutation {
	return tu.mutation
}

// ClearForm clears all "form" edges to the Form entity.
func (tu *TodoUpdate) ClearForm() *TodoUpdate {
	tu.mutation.ClearForm()
	return tu
}

// RemoveFormIDs removes the "form" edge to Form entities by IDs.
func (tu *TodoUpdate) RemoveFormIDs(ids ...int64) *TodoUpdate {
	tu.mutation.RemoveFormIDs(ids...)
	return tu
}

// RemoveForm removes "form" edges to Form entities.
func (tu *TodoUpdate) RemoveForm(f ...*Form) *TodoUpdate {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.RemoveFormIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TodoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TodoMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TodoUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TodoUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TodoUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TodoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   todo.Table,
			Columns: todo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: todo.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(todo.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(todo.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.Task(); ok {
		_spec.SetField(todo.FieldTask, field.TypeString, value)
	}
	if tu.mutation.TaskCleared() {
		_spec.ClearField(todo.FieldTask, field.TypeString)
	}
	if tu.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.FormTable,
			Columns: []string{todo.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: form.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedFormIDs(); len(nodes) > 0 && !tu.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.FormTable,
			Columns: []string{todo.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.FormTable,
			Columns: []string{todo.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TodoUpdateOne is the builder for updating a single Todo entity.
type TodoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TodoMutation
}

// SetName sets the "name" field.
func (tuo *TodoUpdateOne) SetName(s string) *TodoUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TodoUpdateOne) SetNillableName(s *string) *TodoUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TodoUpdateOne) ClearName() *TodoUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetTask sets the "task" field.
func (tuo *TodoUpdateOne) SetTask(s string) *TodoUpdateOne {
	tuo.mutation.SetTask(s)
	return tuo
}

// SetNillableTask sets the "task" field if the given value is not nil.
func (tuo *TodoUpdateOne) SetNillableTask(s *string) *TodoUpdateOne {
	if s != nil {
		tuo.SetTask(*s)
	}
	return tuo
}

// ClearTask clears the value of the "task" field.
func (tuo *TodoUpdateOne) ClearTask() *TodoUpdateOne {
	tuo.mutation.ClearTask()
	return tuo
}

// AddFormIDs adds the "form" edge to the Form entity by IDs.
func (tuo *TodoUpdateOne) AddFormIDs(ids ...int64) *TodoUpdateOne {
	tuo.mutation.AddFormIDs(ids...)
	return tuo
}

// AddForm adds the "form" edges to the Form entity.
func (tuo *TodoUpdateOne) AddForm(f ...*Form) *TodoUpdateOne {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.AddFormIDs(ids...)
}

// Mutation returns the TodoMutation object of the builder.
func (tuo *TodoUpdateOne) Mutation() *TodoMutation {
	return tuo.mutation
}

// ClearForm clears all "form" edges to the Form entity.
func (tuo *TodoUpdateOne) ClearForm() *TodoUpdateOne {
	tuo.mutation.ClearForm()
	return tuo
}

// RemoveFormIDs removes the "form" edge to Form entities by IDs.
func (tuo *TodoUpdateOne) RemoveFormIDs(ids ...int64) *TodoUpdateOne {
	tuo.mutation.RemoveFormIDs(ids...)
	return tuo
}

// RemoveForm removes "form" edges to Form entities.
func (tuo *TodoUpdateOne) RemoveForm(f ...*Form) *TodoUpdateOne {
	ids := make([]int64, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.RemoveFormIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TodoUpdateOne) Select(field string, fields ...string) *TodoUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Todo entity.
func (tuo *TodoUpdateOne) Save(ctx context.Context) (*Todo, error) {
	return withHooks[*Todo, TodoMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TodoUpdateOne) SaveX(ctx context.Context) *Todo {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TodoUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TodoUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TodoUpdateOne) sqlSave(ctx context.Context) (_node *Todo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   todo.Table,
			Columns: todo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: todo.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Todo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todo.FieldID)
		for _, f := range fields {
			if !todo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(todo.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(todo.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.Task(); ok {
		_spec.SetField(todo.FieldTask, field.TypeString, value)
	}
	if tuo.mutation.TaskCleared() {
		_spec.ClearField(todo.FieldTask, field.TypeString)
	}
	if tuo.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.FormTable,
			Columns: []string{todo.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: form.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedFormIDs(); len(nodes) > 0 && !tuo.mutation.FormCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.FormTable,
			Columns: []string{todo.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todo.FormTable,
			Columns: []string{todo.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: form.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Todo{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
