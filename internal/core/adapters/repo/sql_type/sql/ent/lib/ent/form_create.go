// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hex-base/internal/core/adapters/repo/sql_type/sql/ent/lib/ent/form"
	"hex-base/internal/core/adapters/repo/sql_type/sql/ent/lib/ent/todo"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FormCreate is the builder for creating a Form entity.
type FormCreate struct {
	config
	mutation *FormMutation
	hooks    []Hook
}

// SetCategory sets the "category" field.
func (fc *FormCreate) SetCategory(s string) *FormCreate {
	fc.mutation.SetCategory(s)
	return fc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fc *FormCreate) SetNillableCategory(s *string) *FormCreate {
	if s != nil {
		fc.SetCategory(*s)
	}
	return fc
}

// SetTitle sets the "title" field.
func (fc *FormCreate) SetTitle(s string) *FormCreate {
	fc.mutation.SetTitle(s)
	return fc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fc *FormCreate) SetNillableTitle(s *string) *FormCreate {
	if s != nil {
		fc.SetTitle(*s)
	}
	return fc
}

// SetStatus sets the "status" field.
func (fc *FormCreate) SetStatus(s string) *FormCreate {
	fc.mutation.SetStatus(s)
	return fc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fc *FormCreate) SetNillableStatus(s *string) *FormCreate {
	if s != nil {
		fc.SetStatus(*s)
	}
	return fc
}

// SetIsDeleted sets the "is_deleted" field.
func (fc *FormCreate) SetIsDeleted(b bool) *FormCreate {
	fc.mutation.SetIsDeleted(b)
	return fc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (fc *FormCreate) SetNillableIsDeleted(b *bool) *FormCreate {
	if b != nil {
		fc.SetIsDeleted(*b)
	}
	return fc
}

// SetTodoID sets the "todo_id" field.
func (fc *FormCreate) SetTodoID(i int32) *FormCreate {
	fc.mutation.SetTodoID(i)
	return fc
}

// SetNillableTodoID sets the "todo_id" field if the given value is not nil.
func (fc *FormCreate) SetNillableTodoID(i *int32) *FormCreate {
	if i != nil {
		fc.SetTodoID(*i)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FormCreate) SetID(i int64) *FormCreate {
	fc.mutation.SetID(i)
	return fc
}

// SetTodo sets the "todo" edge to the Todo entity.
func (fc *FormCreate) SetTodo(t *Todo) *FormCreate {
	return fc.SetTodoID(t.ID)
}

// Mutation returns the FormMutation object of the builder.
func (fc *FormCreate) Mutation() *FormMutation {
	return fc.mutation
}

// Save creates the Form in the database.
func (fc *FormCreate) Save(ctx context.Context) (*Form, error) {
	fc.defaults()
	return withHooks[*Form, FormMutation](ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FormCreate) SaveX(ctx context.Context) *Form {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FormCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FormCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FormCreate) defaults() {
	if _, ok := fc.mutation.IsDeleted(); !ok {
		v := form.DefaultIsDeleted
		fc.mutation.SetIsDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FormCreate) check() error {
	if _, ok := fc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Form.is_deleted"`)}
	}
	return nil
}

func (fc *FormCreate) sqlSave(ctx context.Context) (*Form, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FormCreate) createSpec() (*Form, *sqlgraph.CreateSpec) {
	var (
		_node = &Form{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: form.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: form.FieldID,
			},
		}
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Category(); ok {
		_spec.SetField(form.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := fc.mutation.Title(); ok {
		_spec.SetField(form.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.SetField(form.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := fc.mutation.IsDeleted(); ok {
		_spec.SetField(form.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if nodes := fc.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   form.TodoTable,
			Columns: []string{form.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TodoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FormCreateBulk is the builder for creating many Form entities in bulk.
type FormCreateBulk struct {
	config
	builders []*FormCreate
}

// Save creates the Form entities in the database.
func (fcb *FormCreateBulk) Save(ctx context.Context) ([]*Form, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Form, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FormCreateBulk) SaveX(ctx context.Context) []*Form {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FormCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FormCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
