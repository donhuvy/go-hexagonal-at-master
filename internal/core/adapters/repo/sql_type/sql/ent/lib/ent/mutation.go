// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hex-base/internal/core/adapters/repo/sql_type/sql/ent/lib/ent/form"
	"hex-base/internal/core/adapters/repo/sql_type/sql/ent/lib/ent/predicate"
	"hex-base/internal/core/adapters/repo/sql_type/sql/ent/lib/ent/todo"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeForm = "Form"
	TypeTodo = "Todo"
)

// FormMutation represents an operation that mutates the Form nodes in the graph.
type FormMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	category      *string
	title         *string
	status        *string
	is_deleted    *bool
	clearedFields map[string]struct{}
	todo          *int32
	clearedtodo   bool
	done          bool
	oldValue      func(context.Context) (*Form, error)
	predicates    []predicate.Form
}

var _ ent.Mutation = (*FormMutation)(nil)

// formOption allows management of the mutation configuration using functional options.
type formOption func(*FormMutation)

// newFormMutation creates new mutation for the Form entity.
func newFormMutation(c config, op Op, opts ...formOption) *FormMutation {
	m := &FormMutation{
		config:        c,
		op:            op,
		typ:           TypeForm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormID sets the ID field of the mutation.
func withFormID(id int64) formOption {
	return func(m *FormMutation) {
		var (
			err   error
			once  sync.Once
			value *Form
		)
		m.oldValue = func(ctx context.Context) (*Form, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Form.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withForm sets the old Form of the mutation.
func withForm(node *Form) formOption {
	return func(m *FormMutation) {
		m.oldValue = func(context.Context) (*Form, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Form entities.
func (m *FormMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Form.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCategory sets the "category" field.
func (m *FormMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *FormMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ClearCategory clears the value of the "category" field.
func (m *FormMutation) ClearCategory() {
	m.category = nil
	m.clearedFields[form.FieldCategory] = struct{}{}
}

// CategoryCleared returns if the "category" field was cleared in this mutation.
func (m *FormMutation) CategoryCleared() bool {
	_, ok := m.clearedFields[form.FieldCategory]
	return ok
}

// ResetCategory resets all changes to the "category" field.
func (m *FormMutation) ResetCategory() {
	m.category = nil
	delete(m.clearedFields, form.FieldCategory)
}

// SetTitle sets the "title" field.
func (m *FormMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *FormMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *FormMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[form.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *FormMutation) TitleCleared() bool {
	_, ok := m.clearedFields[form.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *FormMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, form.FieldTitle)
}

// SetStatus sets the "status" field.
func (m *FormMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *FormMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *FormMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[form.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *FormMutation) StatusCleared() bool {
	_, ok := m.clearedFields[form.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *FormMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, form.FieldStatus)
}

// SetIsDeleted sets the "is_deleted" field.
func (m *FormMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *FormMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *FormMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetTodoID sets the "todo_id" field.
func (m *FormMutation) SetTodoID(i int32) {
	m.todo = &i
}

// TodoID returns the value of the "todo_id" field in the mutation.
func (m *FormMutation) TodoID() (r int32, exists bool) {
	v := m.todo
	if v == nil {
		return
	}
	return *v, true
}

// OldTodoID returns the old "todo_id" field's value of the Form entity.
// If the Form object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormMutation) OldTodoID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTodoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTodoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTodoID: %w", err)
	}
	return oldValue.TodoID, nil
}

// ClearTodoID clears the value of the "todo_id" field.
func (m *FormMutation) ClearTodoID() {
	m.todo = nil
	m.clearedFields[form.FieldTodoID] = struct{}{}
}

// TodoIDCleared returns if the "todo_id" field was cleared in this mutation.
func (m *FormMutation) TodoIDCleared() bool {
	_, ok := m.clearedFields[form.FieldTodoID]
	return ok
}

// ResetTodoID resets all changes to the "todo_id" field.
func (m *FormMutation) ResetTodoID() {
	m.todo = nil
	delete(m.clearedFields, form.FieldTodoID)
}

// ClearTodo clears the "todo" edge to the Todo entity.
func (m *FormMutation) ClearTodo() {
	m.clearedtodo = true
}

// TodoCleared reports if the "todo" edge to the Todo entity was cleared.
func (m *FormMutation) TodoCleared() bool {
	return m.TodoIDCleared() || m.clearedtodo
}

// TodoIDs returns the "todo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TodoID instead. It exists only for internal usage by the builders.
func (m *FormMutation) TodoIDs() (ids []int32) {
	if id := m.todo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTodo resets all changes to the "todo" edge.
func (m *FormMutation) ResetTodo() {
	m.todo = nil
	m.clearedtodo = false
}

// Where appends a list predicates to the FormMutation builder.
func (m *FormMutation) Where(ps ...predicate.Form) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Form, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Form).
func (m *FormMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.category != nil {
		fields = append(fields, form.FieldCategory)
	}
	if m.title != nil {
		fields = append(fields, form.FieldTitle)
	}
	if m.status != nil {
		fields = append(fields, form.FieldStatus)
	}
	if m.is_deleted != nil {
		fields = append(fields, form.FieldIsDeleted)
	}
	if m.todo != nil {
		fields = append(fields, form.FieldTodoID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case form.FieldCategory:
		return m.Category()
	case form.FieldTitle:
		return m.Title()
	case form.FieldStatus:
		return m.Status()
	case form.FieldIsDeleted:
		return m.IsDeleted()
	case form.FieldTodoID:
		return m.TodoID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case form.FieldCategory:
		return m.OldCategory(ctx)
	case form.FieldTitle:
		return m.OldTitle(ctx)
	case form.FieldStatus:
		return m.OldStatus(ctx)
	case form.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case form.FieldTodoID:
		return m.OldTodoID(ctx)
	}
	return nil, fmt.Errorf("unknown Form field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormMutation) SetField(name string, value ent.Value) error {
	switch name {
	case form.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case form.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case form.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case form.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case form.FieldTodoID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTodoID(v)
		return nil
	}
	return fmt.Errorf("unknown Form field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Form numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(form.FieldCategory) {
		fields = append(fields, form.FieldCategory)
	}
	if m.FieldCleared(form.FieldTitle) {
		fields = append(fields, form.FieldTitle)
	}
	if m.FieldCleared(form.FieldStatus) {
		fields = append(fields, form.FieldStatus)
	}
	if m.FieldCleared(form.FieldTodoID) {
		fields = append(fields, form.FieldTodoID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormMutation) ClearField(name string) error {
	switch name {
	case form.FieldCategory:
		m.ClearCategory()
		return nil
	case form.FieldTitle:
		m.ClearTitle()
		return nil
	case form.FieldStatus:
		m.ClearStatus()
		return nil
	case form.FieldTodoID:
		m.ClearTodoID()
		return nil
	}
	return fmt.Errorf("unknown Form nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormMutation) ResetField(name string) error {
	switch name {
	case form.FieldCategory:
		m.ResetCategory()
		return nil
	case form.FieldTitle:
		m.ResetTitle()
		return nil
	case form.FieldStatus:
		m.ResetStatus()
		return nil
	case form.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case form.FieldTodoID:
		m.ResetTodoID()
		return nil
	}
	return fmt.Errorf("unknown Form field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.todo != nil {
		edges = append(edges, form.EdgeTodo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case form.EdgeTodo:
		if id := m.todo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtodo {
		edges = append(edges, form.EdgeTodo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormMutation) EdgeCleared(name string) bool {
	switch name {
	case form.EdgeTodo:
		return m.clearedtodo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormMutation) ClearEdge(name string) error {
	switch name {
	case form.EdgeTodo:
		m.ClearTodo()
		return nil
	}
	return fmt.Errorf("unknown Form unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormMutation) ResetEdge(name string) error {
	switch name {
	case form.EdgeTodo:
		m.ResetTodo()
		return nil
	}
	return fmt.Errorf("unknown Form edge %s", name)
}

// TodoMutation represents an operation that mutates the Todo nodes in the graph.
type TodoMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	name          *string
	task          *string
	clearedFields map[string]struct{}
	form          map[int64]struct{}
	removedform   map[int64]struct{}
	clearedform   bool
	done          bool
	oldValue      func(context.Context) (*Todo, error)
	predicates    []predicate.Todo
}

var _ ent.Mutation = (*TodoMutation)(nil)

// todoOption allows management of the mutation configuration using functional options.
type todoOption func(*TodoMutation)

// newTodoMutation creates new mutation for the Todo entity.
func newTodoMutation(c config, op Op, opts ...todoOption) *TodoMutation {
	m := &TodoMutation{
		config:        c,
		op:            op,
		typ:           TypeTodo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTodoID sets the ID field of the mutation.
func withTodoID(id int32) todoOption {
	return func(m *TodoMutation) {
		var (
			err   error
			once  sync.Once
			value *Todo
		)
		m.oldValue = func(ctx context.Context) (*Todo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Todo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTodo sets the old Todo of the mutation.
func withTodo(node *Todo) todoOption {
	return func(m *TodoMutation) {
		m.oldValue = func(context.Context) (*Todo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TodoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TodoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Todo entities.
func (m *TodoMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TodoMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TodoMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Todo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TodoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TodoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TodoMutation) ClearName() {
	m.name = nil
	m.clearedFields[todo.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TodoMutation) NameCleared() bool {
	_, ok := m.clearedFields[todo.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TodoMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, todo.FieldName)
}

// SetTask sets the "task" field.
func (m *TodoMutation) SetTask(s string) {
	m.task = &s
}

// Task returns the value of the "task" field in the mutation.
func (m *TodoMutation) Task() (r string, exists bool) {
	v := m.task
	if v == nil {
		return
	}
	return *v, true
}

// OldTask returns the old "task" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldTask(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTask is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTask requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTask: %w", err)
	}
	return oldValue.Task, nil
}

// ClearTask clears the value of the "task" field.
func (m *TodoMutation) ClearTask() {
	m.task = nil
	m.clearedFields[todo.FieldTask] = struct{}{}
}

// TaskCleared returns if the "task" field was cleared in this mutation.
func (m *TodoMutation) TaskCleared() bool {
	_, ok := m.clearedFields[todo.FieldTask]
	return ok
}

// ResetTask resets all changes to the "task" field.
func (m *TodoMutation) ResetTask() {
	m.task = nil
	delete(m.clearedFields, todo.FieldTask)
}

// AddFormIDs adds the "form" edge to the Form entity by ids.
func (m *TodoMutation) AddFormIDs(ids ...int64) {
	if m.form == nil {
		m.form = make(map[int64]struct{})
	}
	for i := range ids {
		m.form[ids[i]] = struct{}{}
	}
}

// ClearForm clears the "form" edge to the Form entity.
func (m *TodoMutation) ClearForm() {
	m.clearedform = true
}

// FormCleared reports if the "form" edge to the Form entity was cleared.
func (m *TodoMutation) FormCleared() bool {
	return m.clearedform
}

// RemoveFormIDs removes the "form" edge to the Form entity by IDs.
func (m *TodoMutation) RemoveFormIDs(ids ...int64) {
	if m.removedform == nil {
		m.removedform = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.form, ids[i])
		m.removedform[ids[i]] = struct{}{}
	}
}

// RemovedForm returns the removed IDs of the "form" edge to the Form entity.
func (m *TodoMutation) RemovedFormIDs() (ids []int64) {
	for id := range m.removedform {
		ids = append(ids, id)
	}
	return
}

// FormIDs returns the "form" edge IDs in the mutation.
func (m *TodoMutation) FormIDs() (ids []int64) {
	for id := range m.form {
		ids = append(ids, id)
	}
	return
}

// ResetForm resets all changes to the "form" edge.
func (m *TodoMutation) ResetForm() {
	m.form = nil
	m.clearedform = false
	m.removedform = nil
}

// Where appends a list predicates to the TodoMutation builder.
func (m *TodoMutation) Where(ps ...predicate.Todo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TodoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TodoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Todo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TodoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TodoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Todo).
func (m *TodoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TodoMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, todo.FieldName)
	}
	if m.task != nil {
		fields = append(fields, todo.FieldTask)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TodoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case todo.FieldName:
		return m.Name()
	case todo.FieldTask:
		return m.Task()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TodoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case todo.FieldName:
		return m.OldName(ctx)
	case todo.FieldTask:
		return m.OldTask(ctx)
	}
	return nil, fmt.Errorf("unknown Todo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case todo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case todo.FieldTask:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTask(v)
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TodoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TodoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Todo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TodoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(todo.FieldName) {
		fields = append(fields, todo.FieldName)
	}
	if m.FieldCleared(todo.FieldTask) {
		fields = append(fields, todo.FieldTask)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TodoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TodoMutation) ClearField(name string) error {
	switch name {
	case todo.FieldName:
		m.ClearName()
		return nil
	case todo.FieldTask:
		m.ClearTask()
		return nil
	}
	return fmt.Errorf("unknown Todo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TodoMutation) ResetField(name string) error {
	switch name {
	case todo.FieldName:
		m.ResetName()
		return nil
	case todo.FieldTask:
		m.ResetTask()
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TodoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.form != nil {
		edges = append(edges, todo.EdgeForm)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TodoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case todo.EdgeForm:
		ids := make([]ent.Value, 0, len(m.form))
		for id := range m.form {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TodoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedform != nil {
		edges = append(edges, todo.EdgeForm)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TodoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case todo.EdgeForm:
		ids := make([]ent.Value, 0, len(m.removedform))
		for id := range m.removedform {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TodoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedform {
		edges = append(edges, todo.EdgeForm)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TodoMutation) EdgeCleared(name string) bool {
	switch name {
	case todo.EdgeForm:
		return m.clearedform
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TodoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Todo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TodoMutation) ResetEdge(name string) error {
	switch name {
	case todo.EdgeForm:
		m.ResetForm()
		return nil
	}
	return fmt.Errorf("unknown Todo edge %s", name)
}
